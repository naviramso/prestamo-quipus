<div class="space-y-6">
    <!-- Header -->
    <div class="bg-white opacity-80 rounded-lg shadow-sm border p-6">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-2xl font-bold text-gray-800">Gestión de Estudiantes</h1>
                <p class="text-gray-600">Administra todos los estudiantes del sistema</p>
            </div>
            <% if (admin.rol==='administrador' ) { %>
                <div class="flex space-x-3">
                    <button onclick="mostrarModalPromocion()"
                        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                        </svg>
                        Promocionar Grados
                    </button>
                    <a href="/admin/estudiantes"
                        class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md font-medium transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Nuevo Estudiante
                    </a>
                </div>
                <% } %>
        </div>
    </div>

    <!-- Estadísticas -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="bg-white opacity-80 rounded-lg shadow-sm border p-4">
            <div class="flex items-center">
                <div class="p-2 bg-blue-100 rounded-lg">
                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-600">Total</p>
                    <p class="text-xl font-semibold text-gray-900" id="totalEstudiantes">0</p>
                </div>
            </div>
        </div>

        <div class="bg-white opacity-80 rounded-lg shadow-sm border p-4">
            <div class="flex items-center">
                <div class="p-2 bg-green-100 rounded-lg">
                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-600">Activos</p>
                    <p class="text-xl font-semibold text-gray-900" id="activos">0</p>
                </div>
            </div>
        </div>

        <div class="bg-white opacity-80 rounded-lg shadow-sm border p-4">
            <div class="flex items-center">
                <div class="p-2 bg-gray-100 rounded-lg">
                    <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-600">Inactivos</p>
                    <p class="text-xl font-semibold text-gray-900" id="inactivos">0</p>
                </div>
            </div>
        </div>

        <div class="bg-white opacity-80 rounded-lg shadow-sm border p-4">
            <div class="flex items-center">
                <div class="p-2 bg-yellow-100 rounded-lg">
                    <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-600">Con Préstamos</p>
                    <p class="text-xl font-semibold text-gray-900" id="conPrestamos">0</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="bg-white opacity-80 rounded-lg shadow-sm border p-6">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div class="flex flex-col md:flex-row md:items-center gap-4 flex-wrap">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Estado</label>
                    <select id="filtroEstado"
                        class="w-full md:w-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
                        <option value="todos">Todos</option>
                        <option value="activo">Activos</option>
                        <option value="inactivo">Inactivos</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Grado</label>
                    <select id="filtroGrado"
                        class="w-full md:w-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
                        <option value="todos">Todos</option>
                        <option value="4">4to</option>
                        <option value="5">5to</option>
                        <option value="6">6to</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Paralelo</label>
                    <select id="filtroParalelo"
                        class="w-full md:w-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
                        <option value="todos">Todos</option>
                        <option value="A">A</option>
                        <option value="B">B</option>
                        <option value="C">C</option>
                        <option value="D">D</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Buscar</label>
                    <input type="text" id="buscarTexto" placeholder="Nombre, apellido o CI"
                        class="w-full md:w-64 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent">
                </div>
            </div>

            <div class="flex items-center gap-4">
                <button onclick="cargarEstudiantes()"
                    class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors flex items-center">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Actualizar
                </button>
            </div>
        </div>
    </div>

    <!-- Tabla de Estudiantes -->
    <div class="bg-white opacity-80 rounded-lg shadow-sm border">
        <div class="p-6 border-b">
            <h2 class="text-lg font-semibold text-gray-800">Lista de Estudiantes</h2>
            <p class="text-gray-600 text-sm" id="contadorResultados">Mostrando 0 estudiantes</p>
        </div>

        <div class="p-6">
            <div class="overflow-x-auto">
                <table class="min-w-full table-auto">
                    <thead>
                        <tr class="bg-gray-50">
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Nombre Completo</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">CI</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Grado/Paralelo</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Teléfono</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Estado</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tabla-estudiantes">
                        <tr>
                            <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                                <div class="flex justify-center">
                                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
                                </div>
                                <p class="mt-2">Cargando estudiantes...</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Paginación -->
            <div class="mt-6 flex items-center justify-between">
                <p class="text-sm text-gray-700" id="infoPaginacion">
                    Mostrando 0 de 0 estudiantes
                </p>
                <div class="flex space-x-2" id="paginacion">
                    <!-- Los botones de paginación se generarán aquí -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para ver/editar estudiante -->
<div id="modalEstudiante" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white opacity-80">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-800 mb-4">Información del Estudiante</h3>

            <form id="form-editar-estudiante" class="space-y-4">
                <input type="hidden" id="editarId">

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Apellido Paterno *</label>
                        <input type="text" id="editarApellidoPaterno" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Apellido Materno *</label>
                        <input type="text" id="editarApellidoMaterno" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Nombres *</label>
                        <input type="text" id="editarNombres" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">CI *</label>
                        <input type="text" id="editarCI" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Grado *</label>
                        <select id="editarGrado" required class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="4">4to</option>
                            <option value="5">5to</option>
                            <option value="6">6to</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Paralelo *</label>
                        <select id="editarParalelo" required class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="A">A</option>
                            <option value="B">B</option>
                            <option value="C">C</option>
                            <option value="D">D</option>
                        </select>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Teléfono</label>
                        <input type="tel" id="editarTelefono"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Estado</label>
                        <select id="editarEstado" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="activo">Activo</option>
                            <option value="inactivo">Inactivo</option>
                        </select>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="cerrarModalEstudiante()"
                        class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                        Cancelar
                    </button>
                    <button type="submit"
                        class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                        Guardar Cambios
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal para promocionar grados -->
<div id="modalPromocion" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white opacity-80">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-800 mb-4">Promocionar Grados</h3>

            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-yellow-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor"
                        viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                    <div>
                        <h4 class="text-sm font-medium text-yellow-800">Esta acción es irreversible</h4>
                        <p class="text-sm text-yellow-700 mt-1">
                            • 4to → 5to Grado<br>
                            • 5to → 6to Grado<br>
                            • 6to → Se desactivan
                        </p>
                    </div>
                </div>
            </div>

            <div class="flex justify-end space-x-3">
                <button onclick="cerrarModalPromocion()"
                    class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                    Cancelar
                </button>
                <button onclick="confirmarPromocion()"
                    class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                    Confirmar Promoción
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let todosLosEstudiantes = [];
    let estudiantesFiltrados = [];
    let estudianteActual = null;
    let paginaActual = 1;
    const estudiantesPorPagina = 10;

    // Cargar estudiantes al iniciar
    document.addEventListener('DOMContentLoaded', function () {
        cargarEstudiantes();

        // Event listeners para filtros
        document.getElementById('filtroEstado').addEventListener('change', filtrarEstudiantes);
        document.getElementById('filtroGrado').addEventListener('change', filtrarEstudiantes);
        document.getElementById('filtroParalelo').addEventListener('change', filtrarEstudiantes);
        document.getElementById('buscarTexto').addEventListener('input', filtrarEstudiantes);

        // Event listener para formulario de edición
        document.getElementById('form-editar-estudiante').addEventListener('submit', guardarEdicionEstudiante);
    });

    async function cargarEstudiantes() {
        try {
            mostrarLoading();

            const response = await fetch('/api/estudiantes');
            todosLosEstudiantes = await response.json();

            if (response.ok) {
                await actualizarEstadisticas(todosLosEstudiantes);
                filtrarEstudiantes();
            } else {
                mostrarError('Error al cargar los estudiantes');
            }
        } catch (error) {
            console.error('Error:', error);
            mostrarError('Error de conexión');
        }
    }

    async function actualizarEstadisticas(estudiantes) {
        const total = estudiantes.length;
        const activos = estudiantes.filter(e => e.estado === 'activo').length;
        const inactivos = estudiantes.filter(e => e.estado === 'inactivo').length;

        const response = await fetch('/api/cantidad-prestamos');
        const conPrestamos = await response.json();

        document.getElementById('totalEstudiantes').textContent = total;
        document.getElementById('activos').textContent = activos;
        document.getElementById('inactivos').textContent = inactivos;
        document.getElementById('conPrestamos').textContent = conPrestamos.length;
    }

    function filtrarEstudiantes() {
        const filtroEstado = document.getElementById('filtroEstado').value;
        const filtroGrado = document.getElementById('filtroGrado').value;
        const filtroParalelo = document.getElementById('filtroParalelo').value;
        const buscarTexto = document.getElementById('buscarTexto').value.toLowerCase();

        estudiantesFiltrados = todosLosEstudiantes.filter(estudiante => {
            const coincideEstado = filtroEstado === 'todos' || estudiante.estado === filtroEstado;
            const coincideGrado = filtroGrado === 'todos' || estudiante.grado === filtroGrado;
            const coincideParalelo = filtroParalelo === 'todos' || estudiante.paralelo === filtroParalelo;
            const coincideBusqueda =
                estudiante.nombres.toLowerCase().includes(buscarTexto) ||
                estudiante.apellido_paterno.toLowerCase().includes(buscarTexto) ||
                estudiante.apellido_materno.toLowerCase().includes(buscarTexto) ||
                estudiante.ci.includes(buscarTexto);

            return coincideEstado && coincideGrado && coincideParalelo && coincideBusqueda;
        });

        paginaActual = 1;
        renderizarEstudiantes();
    }

    function renderizarEstudiantes() {
        const tbody = document.getElementById('tabla-estudiantes');
        const inicio = (paginaActual - 1) * estudiantesPorPagina;
        const fin = inicio + estudiantesPorPagina;
        const estudiantesPagina = estudiantesFiltrados.slice(inicio, fin);
        const rol = <%- JSON.stringify(admin.rol) %>

        
        if (estudiantesFiltrados.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                        No se encontraron estudiantes que coincidan con los filtros.
                    </td>
                </tr>
            `;
        } else {
            tbody.innerHTML = estudiantesPagina.map(estudiante => `
                <tr class="border-b hover:bg-gray-50">
                    <td class="px-4 py-3">
                        <div class="flex items-center">
                            <div class="ml-4">
                                <div class="text-sm font-medium text-gray-900">
                                    ${estudiante.apellido_paterno} ${estudiante.apellido_materno} ${estudiante.nombres}
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-3 text-sm text-gray-600">${estudiante.ci}</td>
                    <td class="px-4 py-3 text-sm text-gray-600">${estudiante.grado}° ${estudiante.paralelo}</td>
                    <td class="px-4 py-3 text-sm text-gray-600">${estudiante.telefono || '-'}</td>
                    <td class="px-4 py-3">
                        ${obtenerBadgeEstado(estudiante.estado)}
                    </td>
                    ${rol === 'administrador' ? `
                    <td class="px-4 py-3">
                        <div class="flex space-x-2">
                            <button 
                                onclick="abrirModalEditar(${estudiante.id})"
                                class="text-blue-600 hover:text-blue-800 text-sm font-medium"
                            >
                                Editar
                            </button>
                            <button 
                                onclick="eliminarEstudiante(${estudiante.id})"
                                class="text-red-600 hover:text-red-800 text-sm font-medium"
                            >
                                Eliminar
                            </button>
                        </div>
                    </td>
                </tr>
            ` : ''} `).join('');
        }

        actualizarPaginacion();
        actualizarContadores();
    }

    function obtenerBadgeEstado(estado) {
        if (estado === 'activo') {
            return '<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">Activo</span>';
        } else {
            return '<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">Inactivo</span>';
        }
    }

    // ... (funciones de paginación similares a las de quipus)

    async function abrirModalEditar(id) {
        try {
            const response = await fetch(`/api/estudiantes/${id}`);
            const estudiante = await response.json();

            if (response.ok) {
                estudianteActual = estudiante;

                // Llenar el formulario
                document.getElementById('editarId').value = estudiante.id;
                document.getElementById('editarApellidoPaterno').value = estudiante.apellido_paterno;
                document.getElementById('editarApellidoMaterno').value = estudiante.apellido_materno;
                document.getElementById('editarNombres').value = estudiante.nombres;
                document.getElementById('editarCI').value = estudiante.ci;
                document.getElementById('editarGrado').value = estudiante.grado;
                document.getElementById('editarParalelo').value = estudiante.paralelo;
                document.getElementById('editarTelefono').value = estudiante.telefono || '';
                document.getElementById('editarEstado').value = estudiante.estado;

                document.getElementById('modalEstudiante').classList.remove('hidden');
            }
        } catch (error) {
            console.error('Error:', error);
            mostrarMensaje('error', 'Error al cargar los datos del estudiante');
        }
    }

    function cerrarModalEstudiante() {
        document.getElementById('modalEstudiante').classList.add('hidden');
        estudianteActual = null;
    }

    async function guardarEdicionEstudiante(e) {
        e.preventDefault();

        const estudianteActualizado = {
            apellido_paterno: document.getElementById('editarApellidoPaterno').value.trim(),
            apellido_materno: document.getElementById('editarApellidoMaterno').value.trim(),
            nombres: document.getElementById('editarNombres').value.trim(),
            ci: document.getElementById('editarCI').value.trim(),
            grado: document.getElementById('editarGrado').value,
            paralelo: document.getElementById('editarParalelo').value,
            telefono: document.getElementById('editarTelefono').value.trim() || null,
            estado: document.getElementById('editarEstado').value
        };

        try {
            const response = await fetch(`/api/estudiantes/${estudianteActual.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(estudianteActualizado)
            });

            const data = await response.json();

            if (response.ok) {
                mostrarMensaje('success', data.mensaje);
                cerrarModalEstudiante();
                cargarEstudiantes(); // Recargar la lista
            } else {
                mostrarMensaje('error', data.error);
            }
        } catch (error) {
            console.error('Error:', error);
            mostrarMensaje('error', 'Error de conexión');
        }
    }


    async function eliminarEstudiante(id) {
        if (!confirm('¿Estás seguro de eliminar este estudiante?\nEsta acción no se puede deshacer.')) {
            return;
        }

        try {
            const response = await fetch(`/api/estudiantes/${id}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (response.ok) {
                mostrarMensaje('success', data.mensaje);
                cargarEstudiantes(); // Recargar la lista
            } else {
                mostrarMensaje('error', data.error);
            }
        } catch (error) {
            console.error('Error:', error);
            mostrarMensaje('error', 'Error de conexión');
        }
    }

    function mostrarModalPromocion() {
        document.getElementById('modalPromocion').classList.remove('hidden');
    }

    function cerrarModalPromocion() {
        document.getElementById('modalPromocion').classList.add('hidden');
    }

    async function confirmarPromocion() {
        try {
            const response = await fetch('/api/estudiantes/promocionar', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (response.ok) {
                mostrarMensaje('success', data.mensaje);
                cerrarModalPromocion();
                cargarEstudiantes(); // Recargar la lista
            } else {
                mostrarMensaje('error', data.error);
            }
        } catch (error) {
            console.error('Error:', error);
            mostrarMensaje('error', 'Error de conexión');
        }
    }

    // Funciones auxiliares (paginación, mensajes, etc.) similares a las de quipus
    function mostrarMensaje(tipo, texto) {
        // Crear notificación temporal
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 p-4 rounded-md shadow-lg z-50 ${tipo === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
            }`;
        notification.textContent = texto;

        document.body.appendChild(notification);

        // Auto-remover después de 5 segundos
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    function mostrarLoading() {
        const tbody = document.getElementById('tabla-estudiantes');
        tbody.innerHTML = `
            <tr>
                <td colspan="4" class="px-4 py-8 text-center text-gray-500">
                    <div class="flex justify-center">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
                    </div>
                    <p class="mt-2">Cargando estudiantes...</p>
                </td>
            </tr>
        `;
    }

    function mostrarError(mensaje) {
        const tbody = document.getElementById('tabla-estudiantes');
        tbody.innerHTML = `
            <tr>
                <td colspan="4" class="px-4 py-8 text-center text-red-500">
                    <svg class="w-12 h-12 mx-auto text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                    </svg>
                    <p class="mt-2 font-medium">${mensaje}</p>
                    <button 
                        onclick="cargarEstudiantes()"
                        class="mt-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm"
                    >
                        Reintentar
                    </button>
                </td>
            </tr>
        `;
    }

    function actualizarPaginacion() {
        const totalPaginas = Math.ceil(estudiantesFiltrados.length / estudiantesPorPagina);
        const contenedor = document.getElementById('paginacion');

        if (totalPaginas <= 1) {
            contenedor.innerHTML = '';
            return;
        }

        let html = '';

        // Botón anterior
        if (paginaActual > 1) {
            html += `<button onclick="cambiarPagina(${paginaActual - 1})" class="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">Anterior</button>`;
        }

        // Números de página
        for (let i = 1; i <= totalPaginas; i++) {
            if (i === paginaActual) {
                html += `<span class="px-3 py-1 bg-red-600 text-white rounded-md text-sm">${i}</span>`;
            } else {
                html += `<button onclick="cambiarPagina(${i})" class="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">${i}</button>`;
            }
        }

        // Botón siguiente
        if (paginaActual < totalPaginas) {
            html += `<button onclick="cambiarPagina(${paginaActual + 1})" class="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">Siguiente</button>`;
        }

        contenedor.innerHTML = html;
    }

    function actualizarContadores() {
        const inicio = (paginaActual - 1) * estudiantesPorPagina + 1;
        const fin = Math.min(paginaActual * estudiantesPorPagina, estudiantesFiltrados.length);
        const total = estudiantesFiltrados.length;

        document.getElementById('contadorResultados').textContent = `Mostrando ${total} estudiantes`;
        document.getElementById('infoPaginacion').textContent = `Mostrando ${inicio}-${fin} de ${total} estudiantes`;
    }

    function cambiarPagina(pagina) {
        paginaActual = pagina;
        renderizarEstudiantes();
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }

</script>